module Test;
import Std hiding {Iterator::*, Array::to_iter, String::split};
import Iterator;

test_range : IO ();
test_range = (
    println $ "\n[test_range]";;

    let n = 100000;
    let ans = n * (n - 1) / 2;

    let (res, time) = consumed_time_while_lazy(|_|
        Iterator::range(0, n).fold(0, |sum, i| sum + i)
    );
    assert_eq(|_|"sum_by_fold", res, ans);;
    println("sum_by_fold: " + time.to_string);;

    pure()
);

test_loop_iter : IO ();
test_loop_iter = (
    println $ "\n[test_loop_iter]";;

    let n = 100000;
    let ans = n * (n - 1) / 2;

    let (res, time) = consumed_time_while_lazy(|_|
        Iterator::range(0, 2*n).loop_iter(0, |i, sum| if i == n { break(sum) } else { continue(sum + i) })
    );
    assert_eq(|_|"sum_by_loop_iter", res, ans);;
    println("sum_by_loop_iter: " + time.to_string);;

    pure()
);

test_to_array_from_array : IO ();
test_to_array_from_array = (
    println $ "\n[test_to_array_from_array]";;

    let n = 1000;

    let (res, time) = consumed_time_while_lazy(|_|
        Iterator::range(0, n).to_array
    );
    println("range_to_array: " + time.to_string);;

    let arr = ["0", "1", "2", "3", "4"];
    assert_eq(|_|"", arr.to_iter.to_array, arr);;

    pure()
);

test_flatten : IO ();
test_flatten = (
    println $ "\n[test_flatten]";;

    assert_eq(|_|"", [[1, 2, 3], [], [4, 5, 6]].to_iter.map(to_iter).flatten.to_array, [1, 2, 3, 4, 5, 6]);;
    assert_eq(|_|"", [[]].to_iter.map(to_iter).flatten.to_array, [] : Array I64);;
    assert_eq(|_|"", [].to_iter.map(to_iter).flatten.to_array, [] : Array I64);;
    assert_eq(|_|"", [range(1, 4), range(4, 4), range(4, 7)].to_iter.flatten.to_array, range(1, 7).to_array);;

    pure()
);

test_map_filter : IO ();
test_map_filter = (
    println $ "\n[test_map_filter]";;

    let n = 100000;
    let ans = n/3 + n/5 - n/15;

    let (res, time) = consumed_time_while_lazy(|_|
        range(0, n).filter(|i| i % 3 == 0 || i % 5 == 0).map(|i| 1).fold(0, |i, sum| sum + i)
    );
    assert_eq(|_|"count_div_by_3_or_5", res, ans);;
    println("count_div_by_3_or_5: " + time.to_string);;

    pure()
);

test_product_filtermap : IO ();
test_product_filtermap = (
    println $ "\n[test_product_filtermap]";;

    assert_eq(|_|"", range(1, 4).product(['a', 'b'].to_iter).to_array, [(1, 'a'), (2, 'a'), (3, 'a'), (1, 'b'), (2, 'b'), (3, 'b')]);;

    let n = 50;
    let (triples, time) = consumed_time_while_lazy(|_|
        let r1 = range(1, n);
        let r2 = range(1, 2*n*n);
        r1.product(r1).product(r2).filter_map(|((a, b), c)| 
            if a > b { none() };
            if a*a + b*b != c*c { none() };
            some((a, b, c))
        ).to_array
    );
    println("pythagorean_triple: " + time.to_string);;
    assert_eq(|_|"pythagorean_triple", triples, [
        (3, 4, 5), (6, 8, 10), (5, 12, 13), (9, 12, 15), (8, 15, 17), (12, 16, 20), (15, 20, 25), (7, 24, 25), (10, 24, 26), 
        (20, 21, 29), (18, 24, 30), (16, 30, 34), (21, 28, 35), (12, 35, 37), (15, 36, 39), (24, 32, 40), (9, 40, 41), (27, 36, 45), 
        (30, 40, 50), (14, 48, 50), (24, 45, 51), (20, 48, 52), (28, 45, 53), (33, 44, 55), (40, 42, 58), (36, 48, 60)
    ]);;

    pure()
);

test_get_size : IO ();
test_get_size = (
    println $ "\n[test_get_size]";;

    assert_eq(|_|"", range(1, 4).get_size, 3);;

    pure()
);

test_empty : IO ();
test_empty = (
    println $ "\n[test_empty]";;

    assert_eq(|_|"", (empty : EmptyIterator I64).get_size, 0);;

    pure()
);

test_get_front : IO ();
test_get_front = (
    println $ "\n[test_get_front]";;

    assert_eq(|_|"", range(1, 4).get_front, 1);;

    pure()
);

test_remove_first : IO ();
test_remove_first = (
    println $ "\n[test_remove_first]";;

    assert_eq(|_|"", range(1, 4).pop_front.to_array, [2, 3]);;
    assert_eq(|_|"", range(0, 0).pop_front.to_array, []);;

    pure()
);

test_is_empty : IO ();
test_is_empty = (
    println $ "\n[test_is_empty]";;

    assert_eq(|_|"", range(1, 4).is_empty, false);;
    assert_eq(|_|"", range(0, 0).is_empty, true);;

    pure()
);

test_fold_m : IO ();
test_fold_m = (
    println $ "\n[test_fold_m]";;

    range(0, 10).fold_m(0, |i, sum|
        let sum = sum + i;
        println $ "sum up to " + i.to_string + ": " + sum.to_string;;
        pure $ sum
    );;

    pure()
);

test_loop_iter_m : IO ();
test_loop_iter_m = (
    println $ "\n[test_loop_iter_m]";;

    range(0, 20).loop_iter_m(0, |i, sum|
        if i == 10 { break_m $ sum };
        let sum = sum + i;
        println $ "sum up to " + i.to_string + ": " + sum.to_string;;
        continue_m $ sum
    );;

    pure()
);

test_generate : IO ();
test_generate = (
    println $ "\n[test_generate]";;

    let iter = Iterator::generate(0, |_| Option::none());
    assert_eq(|_|"", iter.to_array, [] : Array I64);;

    let iter = Iterator::generate(0, |i| if i == 3 { Option::none() } else { Option::some $ (i+1, i) });
    assert_eq(|_|"", iter.to_array, [0, 1, 2]);;

    pure()
);

test_intersperse : IO ();
test_intersperse = (
    println $ "\n[test_intersperse]";;

    assert_eq(|_|"", range(1, 4).intersperse(0).to_array, [1, 0, 2, 0, 3]);;
    assert_eq(|_|"", range(1, 2).intersperse(0).to_array, [1]);;
    assert_eq(|_|"", range(1, 1).intersperse(0).to_array, [] : Array I64);;

    pure()
);

test_push_front : IO ();
test_push_front = (
    println $ "\n[test_push_front]";;

    let iter = Iterator::empty.push_front(3).push_front(2).push_front(1).push_front(0);
    assert_eq(|_|"", iter.to_array, [0, 1, 2, 3]);;

    pure()
);

test_take : IO ();
test_take = (
    println $ "\n[test_take]";;

    assert_eq(|_|"", Iterator::range(1, 4).take(2).to_array, [1, 2]);;
    assert_eq(|_|"", Iterator::range(1, 4).take(0).to_array, [] : Array I64);;

    pure()
);

test_take_while : IO ();
test_take_while = (
    println $ "\n[test_take_while]";;

    assert_eq(|_|"", Iterator::range(1, 4).take_while(|i| i < 3).to_array, [1, 2]);;
    assert_eq(|_|"", Iterator::range(1, 4).take_while(|i| i < 1).to_array, [] : Array I64);;

    pure()
);

test_zip : IO ();
test_zip = (
    println $ "\n[test_zip]";;

    let iter = Iterator::range(1, 4).zip(Iterator::range(4, 10));
    assert_eq(|_|"", iter.to_array, [(1, 4), (2, 5), (3, 6)]);;

    pure()
);

test_monad : IO ();
test_monad = (
    println $ "\n[test_monad]";;

    let iter = do {
        let x = *Iterator::range(1, 4).to_dyn;
        let y = *['A', 'B'].to_iter.to_dyn;
        pure $ (x, y)
    };
    assert_eq(|_|"", iter.to_array, [(1, 'A'), (1, 'B'), (2, 'A'), (2, 'B'), (3, 'A'), (3, 'B')]);;

    pure()
);

test_range_step : IO ();
test_range_step = (
    println $ "\n[test_range_step]";;

    assert_eq(|_|"A-2", Iterator::range_step(0, 10, -1).take(100).get_size, 100);;
    assert_eq(|_|"A-1", Iterator::range_step(0, 10, 0).take(100).get_size, 100);;
    assert_eq(|_|"A0", Iterator::range_step(0, 10, 0).take(100).get_size, 100);;
    assert_eq(|_|"A1", Iterator::range_step(0, 10, 1).to_array, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);;
    assert_eq(|_|"A2", Iterator::range_step(0, 10, 2).to_array, [0, 2, 4, 6, 8]);;
    assert_eq(|_|"A3", Iterator::range_step(0, 10, 3).to_array, [0, 3, 6, 9]);;
    assert_eq(|_|"A4", Iterator::range_step(0, 10, 4).to_array, [0, 4, 8]);;
    assert_eq(|_|"A5", Iterator::range_step(0, 10, 5).to_array, [0, 5]);;
    assert_eq(|_|"A6", Iterator::range_step(0, 10, 6).to_array, [0, 6]);;
    assert_eq(|_|"A7", Iterator::range_step(0, 10, 7).to_array, [0, 7]);;
    assert_eq(|_|"A8", Iterator::range_step(0, 10, 8).to_array, [0, 8]);;
    assert_eq(|_|"A9", Iterator::range_step(0, 10, 9).to_array, [0, 9]);;
    assert_eq(|_|"A10", Iterator::range_step(0, 10, 10).to_array, [0]);;
    assert_eq(|_|"A11", Iterator::range_step(0, 10, 11).to_array, [0]);;

    assert_eq(|_|"B2", Iterator::range_step(10, 0, 2).take(100).get_size, 100);;
    assert_eq(|_|"B1", Iterator::range_step(10, 0, 1).take(100).get_size, 100);;
    assert_eq(|_|"B0", Iterator::range_step(10, 0, 0).take(100).get_size, 100);;
    assert_eq(|_|"B-1", Iterator::range_step(10, 0, -1).to_array, [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);;
    assert_eq(|_|"B-2", Iterator::range_step(10, 0, -2).to_array, [10, 8, 6, 4, 2]);;
    assert_eq(|_|"B-3", Iterator::range_step(10, 0, -3).to_array, [10, 7, 4, 1]);;
    assert_eq(|_|"B-4", Iterator::range_step(10, 0, -4).to_array, [10, 6, 2]);;
    assert_eq(|_|"B-5", Iterator::range_step(10, 0, -5).to_array, [10, 5]);;
    assert_eq(|_|"B-6", Iterator::range_step(10, 0, -6).to_array, [10, 4]);;
    assert_eq(|_|"B-7", Iterator::range_step(10, 0, -7).to_array, [10, 3]);;
    assert_eq(|_|"B-8", Iterator::range_step(10, 0, -8).to_array, [10, 2]);;
    assert_eq(|_|"B-9", Iterator::range_step(10, 0, -9).to_array, [10, 1]);;
    assert_eq(|_|"B-10", Iterator::range_step(10, 0, -10).to_array, [10]);;
    assert_eq(|_|"B-11", Iterator::range_step(10, 0, -11).to_array, [10]);;

    assert_eq(|_|"C1", Iterator::range_step(0, 0, 1).get_size, 0);;
    assert_eq(|_|"C0", Iterator::range_step(0, 0, 0).get_size, 0);;
    assert_eq(|_|"C-1", Iterator::range_step(0, 0, -1).get_size, 0);;

    pure()
);

test_string_split : IO ();
test_string_split = (
    println $ "\n[test_string_split]";;

    assert_eq(|_|"Ex. 1", "ab,c,".split(",").to_array, ["ab", "c", ""]);;
    assert_eq(|_|"Ex. 2", "abc".split(",").to_array, ["abc"]);;
    assert_eq(|_|"Ex. 3", "abc".split("").to_array, ["a", "b", "c"]);; // Special behavior when the separator is empty.

    assert_eq(|_|"1", "--ab---cde----".split("--").to_array, ["", "ab", "-cde", "", ""]);;
    assert_eq(|_|"2", "ab---cde----".split("--").to_array, ["ab", "-cde", "", ""]);;
    assert_eq(|_|"3", "--ab---cde".split("--").to_array, ["", "ab", "-cde"]);;
    assert_eq(|_|"3", "ab---cde".split("--").to_array, ["ab", "-cde"]);;
    assert_eq(|_|"4", "--".split("--").to_array, ["", ""]);;
    assert_eq(|_|"5", "a".split("--").to_array, ["a"]);;
    assert_eq(|_|"6", "".split("--").to_array, [""]);;

    pure()
);

test : IO ();
test = (
    test_range;;
    test_range_step;;
    test_loop_iter;;
    test_to_array_from_array;;
    test_map_filter;;
    test_flatten;;
    test_product_filtermap;;
    test_get_size;;
    test_empty;;
    test_get_front;;
    test_remove_first;;
    test_is_empty;;
    test_fold_m;;
    test_loop_iter_m;;
    test_generate;;
    test_intersperse;;
    test_push_front;;
    test_take;;
    test_take_while;;
    test_zip;;
    test_monad;;
    test_string_split;;

    pure()
);