module StaticIter;

// The trait Iterable is a trait for types that can be iterated over.
trait iter : Iterable {
    type Item iter;
    advance : iter -> Option (iter, Item iter);
}

/*
    Folding and looping.
*/

// Fold the elements of an iterator from left to right.
//
// Conceptually, `[a0, a1, a2, ...].fold(s, op) = s.op(a0).op(a1).op(a2)...`.
fold : [iter : Iterable, Item iter = a] s -> (a -> s -> s) -> iter -> s;
fold = |s, op, iter| (
    match iter.advance {
        none() => s,
        some((iter, a)) => iter.fold(op(a, s), op)
    }
);

// Fold the elements of an iterator from left to right by monadic action.
fold_m : [m : Monad, iter : Iterable, Item iter = a] s -> (a -> s -> m s) -> iter -> m s;
fold_m = |s, op, iter| (
    match iter.advance {
        none() => pure(s),
        some((iter, a)) => op(a, s).bind(|s| iter.fold_m(s, op))
    }
);

// Loop over the elements of an iterator.
// 
// This function is similar to `fold` but a more general version of it. It allows the user to break out of the loop early.
loop_iter : [iter : Iterable, Item iter = a] s -> (a -> s -> LoopState s s) -> iter -> s;
loop_iter = |s, body, iter| (
    match iter.advance {
        none() => s,
        some((iter, a)) => match body(a, s) {
            break(s) => s,
            continue(s) => iter.loop_iter(s, body),
        }
    }
);

// Loop over the elements of an iterator by monadic action.
loop_iter_m : [m : Monad, iter : Iterable, Item iter = a] s -> (a -> s -> m (LoopState s s)) -> iter -> m s;
loop_iter_m = |s, body, iter| (
    match iter.advance {
        none() => pure(s),
        some((iter, a)) => body(a, s).bind(|state| match state {
            break(s) => pure(s),
            continue(s) => iter.loop_iter_m(s, body),
        })
    }
);

/*
    Conversion from / to arrays.
*/

// Convert an iterator to an array.
to_array : [iter : Iterable, Item iter = a] iter -> Array a;
to_array = |iter| iter.fold([], |a, acc| acc.push_back(a));

type ArrayIterator a = unbox struct { arr : Array a, idx : I64 };

impl ArrayIterator a : Iterable {
    type Item (ArrayIterator a) = a;
    advance = |ArrayIterator { arr : arr, idx : idx }| (
        if idx == arr.get_size { none() };
        let v = arr.@(idx);
        some((ArrayIterator { arr: arr, idx: idx + 1 }, v))
    );
}

// Convert an array to an iterator.
from_array : Array a -> ArrayIterator a;
from_array = |arr| ArrayIterator { arr: arr, idx: 0 };

/*
    Basic iterators.
*/

type EmptyIterator a = unbox struct {};
impl EmptyIterator a : Iterable {
    type Item (EmptyIterator a) = a;
    advance = |_| none();
}

// An iterator that yields no elements.
// 
// NOTE: When using this iterator, you may need to specify the type of the iterator explicitly, e.g, `(empty : EmptyIterator I64)`.
empty : EmptyIterator a;
empty = EmptyIterator {};

type RangeIterator = unbox struct { next : I64, end : I64 };

impl RangeIterator : Iterable {
    type Item RangeIterator = I64;
    advance = |RangeIterator { next : next, end : end }| (
        if next == end { Option::none() }
        else { Option::some $ (RangeIterator { next: next + 1, end: end }, next) }
    );
}

// Create an iterator that generates a range of numbers.
// 
// `range(a, b)` generates a range of numbers from `a` to `b - 1`.
// 
// If `a` is greater than or equal to `b`, the iterator will an infinite sequence of `a`.
range : I64 -> I64 -> RangeIterator;
range = |start, end| RangeIterator { next: start, end: end };

type MapIterator i a b = unbox struct { iter : i, f : a -> b };
impl [i : Iterable, Item i = a] MapIterator i a b : Iterable {
    type Item (MapIterator i a b) = b;
    advance = |MapIterator { iter : iter, f : f }| (
        match iter.advance {
            none() => none(),
            some((iter, a)) => some((MapIterator { iter: iter, f: f }, f(a)))
        }
    );
}

type CountUpIterator = unbox struct { next : I64 };
impl CountUpIterator : Iterable {
    type Item CountUpIterator = I64;
    advance = |CountUpIterator { next : next }| some((CountUpIterator { next: next + 1 }, next));
}

// Create an iterator that counts up from a number.
// 
// `count_up(start)` generates an infinite sequence of numbers starting from `start`.
count_up : I64 -> CountUpIterator;
count_up = |start| CountUpIterator { next: start };

type StateIterator s a = unbox struct {
    state : Option s,
    transit : s -> Option (s, a)
};

impl StateIterator s a : Iterable {
    type Item (StateIterator s a) = a;    
    advance = |StateIterator { state : s, transit : f }| (
        match s {
            none() => none(),
            some(s) => match f(s) {
                none() => none(),
                some((s, a)) => some((generate(s, f), a))
            }
        }
    );
}

// Create an iterator that generates elements by the state transition function.
generate : s -> (s -> Option (s, a)) -> StateIterator s a;
generate = |state, transit| StateIterator { state: some(state), transit: transit };

/*
    Extract information from iterators.
*/

// Get the number of elements in an iterator.
get_size : [iter : Iterable] iter -> I64;
get_size = |iter| iter.fold(0, |_, acc| acc + 1);

// Get the first element of an iterator.
// 
// If the iterator is empty, this function aborts the program.
get_front : [iter : Iterable] iter -> Item iter;
get_front = |iter| (
    match iter.advance {
        none() => undefined("`get_first` for empty iterator"),
        some((_, a)) => a
    }
);

// Remove the first element of an iterator.
// 
// If the iterator is empty, this function does nothing.
pop_front : [iter : Iterable] iter -> iter;
pop_front = |iter| (
    match iter.advance {
        none() => iter,
        some((iter, _)) => iter
    }
);

// Is an iterator empty?
is_empty : [iter : Iterable] iter -> Bool;
is_empty = |iter| iter.advance.is_none;

/*
    Transforming iterators.
*/

// Map a function over an iterator.
// 
// `iter.map(f)` returns an iterator that applies `f` to each element of `iter`.
map : [i : Iterable, Item i = a] (a -> b) -> i -> MapIterator i a b;
map = |f, iter| MapIterator { iter: iter, f: f };

type FilterIterator i a = unbox struct { iter : i, pred : a -> Bool };
impl [i : Iterable, Item i = a] FilterIterator i a : Iterable {
    type Item (FilterIterator i a) = Item i;
    advance = |FilterIterator { iter : iter, pred : pred }| (
        match iter.advance {
            none() => none(),
            some((iter, a)) => if pred(a) { 
                some((FilterIterator { iter: iter, pred: pred }, a))
            } else {
                FilterIterator { iter: iter, pred: pred }.advance
            }
        }
    );
}

// Filter the elements of an iterator by a predicate.
// 
// `iter.filter(pred)` returns an iterator that only yields elements of `iter` for which `pred` returns `true`.
filter : [i : Iterable, Item i = a] (a -> Bool) -> i -> FilterIterator i a;
filter = |pred, iter| FilterIterator { iter: iter, pred: pred };

type FlattenIterator i2 i1 = unbox struct { i2 : i2, i1 : Option i1 };
impl [i2 : Iterable, i1: Iterable, Item i2 = i1] FlattenIterator i2 i1 : Iterable {
    type Item (FlattenIterator i2 i1) = Item i1;
    advance = |FlattenIterator { i2 : i2, i1 : i1 }| (
        match i1 {
            none() => (
                match i2.advance {
                    none() => none(),
                    some((i2, i1)) => FlattenIterator { i2: i2, i1: some(i1) }.advance
                }
            ),
            some(i1) => (
                match i1.advance {
                    none() => FlattenIterator { i2: i2, i1: none() }.advance,
                    some((i1, a)) => some $ (FlattenIterator { i2: i2, i1: some(i1) }, a)
                }
            )
        }
    );
}

// Flatten an iterator of iterators.
flatten : [i2 : Iterable, i1 : Iterable, Item i2 = i1] i2 -> FlattenIterator i2 i1;
flatten = |i2| FlattenIterator { i2: i2, i1: none() };

type ProductIterator i1 i2 a b = unbox struct { iter1 : i1, iter2 : i2, e2 : Option b, iter1_org : i1 };
impl [i1 : Iterable, i2 : Iterable, Item i1 = a, Item i2 = b] ProductIterator i1 i2 a b : Iterable {
    type Item (ProductIterator i1 i2 a b) = (Item i1, Item i2);
    advance = |ProductIterator { iter1 : iter1, iter2 : iter2, e2 : e2, iter1_org : iter1_org }| (
        match e2 {
            some(e2) => (
                match iter1.advance {
                    some((iter1, e1)) => some $ (ProductIterator { iter1: iter1, iter2: iter2, e2: some(e2), iter1_org : iter1_org }, (e1, e2)),
                    none() => match iter2.advance {
                        none() => none(),
                        some((iter2, e2)) => ProductIterator { iter1: iter1_org, iter2: iter2, e2: some(e2), iter1_org : iter1_org }.advance
                    },
                }
            ),
            none() => (
                match iter2.advance {
                    none() => none(),
                    some((iter2, e2)) => ProductIterator { iter1: iter1, iter2: iter2, e2: some(e2), iter1_org : iter1_org }.advance
                }
            ),
        }
    );
}

// Create an iterator that yields the Cartesian product of two iterators.
// 
// NOTE: Since this function is designed so that `iter1.product(iter2)` yields the Cartesian product, the elements of `product(iter2, iter1)` are in the opposite order.
// 
// Example:
// ```
// assert_eq(|_|"", range(1, 4).product(['a', 'b'].from_array).to_array, [(1, 'a'), (2, 'a'), (3, 'a'), (1, 'b'), (2, 'b'), (3, 'b')]);;
// ```
product : [i1 : Iterable, i2 : Iterable, Item i1 = a, Item i2 = b] i2 -> i1 -> ProductIterator i1 i2 a b;
product = |iter2, iter1| ProductIterator { iter1: iter1, iter2: iter2, e2: none(), iter1_org: iter1 };

type AppendIterator i1 i2 = unbox struct { iter1 : Option i1, iter2 : i2 };

impl [i1 : Iterable, i2 : Iterable, Item i1 = a, Item i2 = a] AppendIterator i1 i2 : Iterable {
    type Item (AppendIterator i1 i2) = Item i2;
    advance = |AppendIterator { iter1 : iter1, iter2 : iter2 }| (
        match iter1 {
            none() => (
                match iter2.advance {
                    none() => none(),
                    some((iter2, a)) => some $ (AppendIterator { iter1: none(), iter2: iter2 }, a)
                }
            ),
            some(iter1) => (
                match iter1.advance {
                    none() => AppendIterator { iter1: none(), iter2: iter2 }.advance,
                    some((iter1, a)) => some $ (AppendIterator { iter1: some(iter1), iter2: iter2 }, a)
                }
            )
        }
    );
}

// Append two iterators.
// 
// NOTE: Since this function is designed so that `iter1.append(iter2)` appends `iter2` after `iter1`, `append(iter1, iter2)` appends iterators in the opposite order.
append : [i1 : Iterable, i2 : Iterable, Item i1 = a, Item i2 = a] i2 -> i1 -> AppendIterator i1 i2;
append = |iter2, iter1| AppendIterator { iter1 : some(iter1), iter2 : iter2 };

type IntersperseIterator i a = unbox struct { iter : i, sep : a, next_is_sep : Bool };

impl [i : Iterable, Item i = a] IntersperseIterator i a : Iterable {
    type Item (IntersperseIterator i a) = a;
    advance = |IntersperseIterator { iter : iter, sep : sep, next_is_sep : next_is_sep }| (
        if next_is_sep {
            some((IntersperseIterator { iter: iter, sep: sep, next_is_sep: false }, sep))
        } else {
            match iter.advance {
                none() => none(),
                some((iter, a)) => some((IntersperseIterator { iter: iter, sep: sep, next_is_sep: !iter.is_empty }, a))
            }
        }
    );
}

// Intersperse an element between elements of an iterator.
//
// Example:
// ```
// assert_eq(|_|"", [1, 2, 3].from_array.intersperse(0).to_array, [1, 0, 2, 0, 3]);;
// ```
intersperse : [i : Iterable, Item i = a] a -> i -> IntersperseIterator i a;
intersperse = |sep, iter| IntersperseIterator { iter: iter, sep: sep, next_is_sep: false };

type ConsIterator i a = unbox struct { head : Option a, tail : i };
impl [i : Iterable, Item i = a] ConsIterator i a : Iterable {
    type Item (ConsIterator i a) = a;
    advance = |ConsIterator { head : head, tail : tail }| (
        match head {
            none() => none(),
            some(v) => match tail.advance {
                none() => some $ (ConsIterator { head: none(), tail: tail }, v),
                some((tail, a)) => some $ (ConsIterator { head: some(a), tail: tail }, v)
            }
        }
    );
}

// Push an element to an iterator.
push_front : [i : Iterable, Item i = a] a -> i -> ConsIterator i a;
push_front = |head, tail| ConsIterator { head: some(head), tail: tail };

type ReverseIterator i a = unbox struct { idx : I64, arr : Array a };
impl [i : Iterable, Item i = a] ReverseIterator i a : Iterable {
    type Item (ReverseIterator i a) = a;
    advance = |ReverseIterator { idx : idx, arr : arr }| (
        if idx == -1 { none() }
        else { some $ (ReverseIterator { idx: idx - 1, arr: arr }, arr.@(idx)) }
    );
}

// Reverses an iterator.
reverse : [i : Iterable, Item i = a] i -> ReverseIterator i a;
reverse = |iter| (
    let arr = iter.to_array;
    let n = arr.get_size;
    ReverseIterator { idx: n - 1, arr: arr }
);

// Takes at most `n` elements from an iterator.
type TakeIterator i = unbox struct { iter : i, n : I64 };
impl [i : Iterable] TakeIterator i : Iterable {
    type Item (TakeIterator i) = Item i;
    advance = |TakeIterator { iter : iter, n : n }| (
        if n <= 0 { none() };
        match iter.advance {
            none() => none(),
            some((iter, a)) => some((TakeIterator { iter: iter, n: n - 1 }, a))
        }
    );
}

// Take the first `n` elements of an iterator.
take : [i : Iterable] I64 -> i -> TakeIterator i;
take = |n, iter| TakeIterator { iter: iter, n: n };

type TakeWhileIterator i a = unbox struct { iter : i, pred : a -> Bool };
impl [i : Iterable, Item i = a] TakeWhileIterator i a : Iterable {
    type Item (TakeWhileIterator i a) = a;
    advance = |TakeWhileIterator { iter : iter, pred : pred }| (
        match iter.advance {
            none() => none(),
            some((iter, a)) => if pred(a) { 
                some((TakeWhileIterator { iter: iter, pred: pred }, a))
            } else {
                none()
            }
        }
    );
}

// Take elements from an iterator while a predicate holds.
take_while : [i : Iterable, Item i = a] (a -> Bool) -> i -> TakeWhileIterator i a;
take_while = |pred, iter| TakeWhileIterator { iter: iter, pred: pred };

type ZipIterator i1 i2 = unbox struct { iter1 : i1, iter2 : i2 };
impl [i1 : Iterable, i2 : Iterable] ZipIterator i1 i2 : Iterable {
    type Item (ZipIterator i1 i2) = (Item i1, Item i2);
    advance = |ZipIterator { iter1 : iter1, iter2 : iter2 }| (
        match iter1.advance {
            none() => none(),
            some((iter1, a)) => match iter2.advance {
                none() => none(),
                some((iter2, b)) => some((ZipIterator { iter1: iter1, iter2: iter2 }, (a, b)))
            }
        }
    );
}

// Zip two iterators.
// 
// NOTE: Since this function is designed so that `iter1.zip(iter2)` zips `iter1` and `iter2`, the elements of `zip(iter2, iter1)` are in the opposite order.
zip : [i1 : Iterable, i2 : Iterable] i2 -> i1 -> ZipIterator i1 i2;
zip = |iter2, iter1| ZipIterator { iter1: iter1, iter2: iter2 };

type DynamicIterator a = unbox struct { next : () -> Option (DynamicIterator a, a) };

namespace DynamicIterator {
    empty : DynamicIterator a;
    empty = DynamicIterator { next: |_| none() };

    singleton : a -> DynamicIterator a;
    singleton = |a| DynamicIterator { next: |_| some((DynamicIterator::empty, a)) };
}

impl DynamicIterator a : Iterable {
    type Item (DynamicIterator a) = a;
    advance = |DynamicIterator { next : next }| next();
}

to_dyn : [iter : Iterable, Item iter = a] iter -> DynamicIterator a;
to_dyn = |iter| DynamicIterator { next: |_| (
    match iter.advance {
        none() => none(),
        some((iter, a)) => some((iter.to_dyn, a))
    }
) };

impl DynamicIterator : Monad {
    pure = |a| DynamicIterator::singleton(a);
    bind = |f, xs| xs.map(f).flatten.to_dyn;
}